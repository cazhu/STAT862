library(lars)
data(diabetes)
X=diabetes$x
y=diabetes$y
fit.lars = lars(X,y, type="lasso",trace=TRUE)
plot(fit.lars)
fit.lars$beta[bestindex,]
cv.fit.lars = cv.lars(X,y,mode="step")
cbind(cv.fit.lars$index,cv.fit.lars$cv)
bestindex = cv.fit.lars$index[which.min(cv.fit.lars$cv)]
which.min(cv.fit.lars$cv)
fit.lars$beta
bestindex
fit.lars$beta[bestindex,]
library(ElemStatLearn)
install.packages("ElemStatLearn")
library(ElemStatLearn)
data(ozone)
X <- ozone$temperature
y <- ozone$ozone
X <- ozone$temperature
y <- ozone$ozone
panel.smooth <- function(x,y,...)
{
fit <- lm(y ~ x + I(x^2))
x0 <- seq(min(x),max(x),len=300)
y0 = predict(fit,newdata=data.frame(x=x0),se.fit=T)
#lpolygon(c(x0,rev(x0)),c(y0$fit-2*y0$se.fit,rev(y0$fit+2*y0$se.fit)),col="gray",border=F,...)
llines(x0,predict(fit,data.frame(x=x0)),col="black")
}
xyplot(y~x, panel = myPanel)
library(lattice)
library(splines)
xyplot(y~x, panel = myPanel)
xyplot(y~X, panel = myPanel)
myPanel <- function(...)
{
panel.smooth(...)
panel.xyplot(...,alpha=.5)
}
panel.smooth <- function(x,y,...)
{
fit <- lm(y ~ x + I(x^2))
x0 <- seq(min(x),max(x),len=300)
y0 = predict(fit,newdata=data.frame(x=x0),se.fit=T)
#lpolygon(c(x0,rev(x0)),c(y0$fit-2*y0$se.fit,rev(y0$fit+2*y0$se.fit)),col="gray",border=F,...)
llines(x0,predict(fit,data.frame(x=x0)),col="black")
}
xyplot(y~X, panel = myPanel)
}
require(mgcv)
panel.smooth <- function(x,y,...)
{
fit5 <- gam(y~s(x))
xx <- seq(min(x),max(x),len=300)
yy <- predict(fit5,newdata=data.frame(x=xx),se.fit=T)
var5 <- yy$se.fit^2
plot(x0, var5, type = "l", xlab = "x", ylab = "variance")
lpolygon(c(xx,rev(xx)),c(yy$fit-1.96*yy$se.fit,rev(yy$fit+1.96*yy$se.fit)),col=rgb(.6,.6,.6,alpha=.4),border=F,...)
llines(xx,yy$fit,col="black",lwd=2)
llines(xx,yy$se.fit,col="black",lwd=2)
}
xyplot(y~X,panel=myPanel)
panel.smooth <- function(x,y,...)
{
fit <- gam(y~s(x))
xx <- seq(min(x),max(x),len=300)
yy <- predict(fit5,newdata=data.frame(x=xx),se.fit=T)
x0 = seq(min(x),max(x),len=300)
y0 = predict(fit,newdata=data.frame(x=x0),se.fit=T)
lpolygon(c(xx,rev(xx)),c(yy$fit-1.96*yy$se.fit,rev(yy$fit+1.96*yy$se.fit)),col=rgb(.6,.6,.6,alpha=.4),border=F,...)
llines(xx,yy$fit,col="black",lwd=2)
llines(xx,yy$se.fit,col="black",lwd=2)
}
xyplot(y~X,panel=myPanel)
panel.smooth <- function(x,y,...)
{
fit <- gam(y~s(x))
xx <- seq(min(x),max(x),len=100)
yy <- predict(fit5,newdata=data.frame(x=xx),se.fit=T)
x0 = seq(min(x),max(x),len=100)
y0 = predict(fit,newdata=data.frame(x=x0),se.fit=T)
lpolygon(c(xx,rev(xx)),c(yy$fit-1.96*yy$se.fit,rev(yy$fit+1.96*yy$se.fit)),col=rgb(.6,.6,.6,alpha=.4),border=F,...)
llines(xx,yy$fit,col="black",lwd=2)
llines(xx,yy$se.fit,col="black",lwd=2)
}
xyplot(y~X,panel=myPanel)
panel.smooth <- function(x,y,...)
{
fit <- gam(y~s(x))
xx <- seq(min(x),max(x),len=100)
yy <- predict(fit,newdata=data.frame(x=xx),se.fit=T)
x0 = seq(min(x),max(x),len=100)
y0 = predict(fit,newdata=data.frame(x=x0),se.fit=T)
lpolygon(c(xx,rev(xx)),c(yy$fit-1.96*yy$se.fit,rev(yy$fit+1.96*yy$se.fit)),col=rgb(.6,.6,.6,alpha=.4),border=F,...)
llines(xx,yy$fit,col="black",lwd=2)
llines(xx,yy$se.fit,col="black",lwd=2)
}
xyplot(y~X,panel=myPanel)
panel.smooth <- function(x,y,...)
{
fit <- gam(y~s(x))
xx <- seq(min(x),max(x),len=100)
yy <- predict(fit,newdata=data.frame(x=xx),se.fit=T)
x0 = seq(min(x),max(x),len=100)
y0 = predict(fit,newdata=data.frame(x=x0),se.fit=T)
lpolygon(c(xx,rev(xx)),c(yy$fit-1.96*yy$se.fit,rev(yy$fit+1.96*yy$se.fit)),col=rgb(.6,.6,.6,alpha=.4),border=F,...)
llines(xx,yy$fit,col="black",lwd=2)
}
xyplot(y~X,panel=myPanel)
panel.smooth <- function(x,y,...)
{
fit <- lm(y ~ x + I(x^2))
x0 <- seq(min(x),max(x),len=300)
y0 = predict(fit,newdata=data.frame(x=x0),se.fit=T)
lpolygon(c(x0,rev(x0)),c(y0$fit-2*y0$se.fit,rev(y0$fit+2*y0$se.fit)),col="gray",border=F,...)
llines(x0,predict(fit,data.frame(x=x0)),col="black")
}
xyplot(y~X, panel = myPanel)
-32.665*0.5 - 2*9.08*0.5 + 3*41.74*0.5^2
1.596 - 32.665 * 0.5 - 9.08 * 0.5^2 + 41.74 * 0.5^3
a = -32.665*0.5 - 2*9.08*0.5 + 3*41.74*0.5^2
b = 1.596 - 32.665 * 0.5 - 9.08 * 0.5^2 + 41.74 * 0.5^3
b + 0.5* a
b - 0.5* a
getwd()
load("~/Dropbox/STAT862/.RData")
browser(www.google.com)
f <- function(y) {
w <- w + y
w
}
w < 12
w <- 12
f(1)
a.b<- 1
a.c <- 2
a
str(a.b)
library("truncnorm")
alpha = 2
beta = 2
X = seq(0,1,0.01)
c = max(dbeta(X, alpha, beta)/dtruncnorm(X))
x = NULL
n = 10000
N = 10000
u = runif(N)
y = rtruncnorm(N, a= 0, b= 1, mean = 0, sd = 1)
accept = (dbeta(y, alpha, beta)/(dtruncnorm(y, a = 0, b = 1, mean = 0, sd = 1)*c))
x = y[accept]
mean(accept)
1/c
cc = max(dbeta(X, alpha, beta)/dunif(X))
par(mfrow=c(2,2))
hist(x);qqnorm(x);qqline(x);
x0 = rbeta(n, alpha, beta)
hist(x0);qqnorm(x0);qqline(x0)
set.seed(9999)
X1 = rlaplace(M, 1)
library("OOmisc")
set.seed(9999)
X1 = rlaplace(M, 1)
M = 500
set.seed(9999)
X1 = rlaplace(M, 1)
X1
X1 = X1*(X1>0)
X1
M = 500
# the range of x should be from zero to infinity
set.seed(9999)
X1 = rlaplace(M, 1)
X2 = rcauchy(M, location = 0, scale = 2)
X3 = rnorm(M)
X1 = X1*(X1>0); X2 = X2*(X2>0); X3 = X3*(X3>0)
wgx1 = function (x)
{
2*(sin(x))^2 * exp (-x^0.5 - 0.5*x + abs(x))
}
wgx2 = function (x)
{
2*pi*(1+(x^2/4))* (sin(x))^2 * exp (-x^0.5 - 0.5*x)
}
wgx3 = function (x)
{
(2*pi)^0.5 * exp(x^2/2)* (sin(x))^2 * exp (-x^0.5 - 0.5*x)
}
IS3 = mean((wgx3(X3)), na.rm=TRUE)
IS2 = mean((wgx2(X2)), na.rm=TRUE)
IS1 = mean((wgx2(X1)), na.rm=TRUE)
standev1=sd((wgx1(X1))/sqrt(M), na.rm=TRUE)
c1 = (c(IS1,standev1,IS1-qnorm(0.975)*standev1,IS1+qnorm(0.975)*standev1))
standev2=sd((wgx2(X2))/sqrt(M), na.rm=TRUE)
c2 = (c(IS2,standev2,IS2-qnorm(0.975)*standev2,IS2+qnorm(0.975)*standev2))
standev3=sd((wgx3(X3))/sqrt(M), na.rm=TRUE)
c3 = (c(IS3,standev3,IS3-qnorm(0.975)*standev3,IS3+qnorm(0.975)*standev3))
rbind(c1,c2,c3)
P<-rbind(c(0.5,0.5,0,0,0),c(0.25,0.5,0.25,0,0),c(0,0.25,0.5,0.25,0),
c(0,0,0.25,0.5,0.25),c(0,0,0, 0.5,0.5))
s<-vector('numeric',50000)
s[1]<-1 # initial location
for(j in 2:50000)
s[j]<-sample(1:5, size=1,prob=P[s[j-1],])
v<-c(500,1000,2000,5000,10000,20000,50000)
for(i in 1:length(v))
print(table(s[1:v[i]])/v[i])
? for()
s[1:100]
for(j in 2:50000)
{s[j]<-sample(1:5, size=1,prob=P[s[j-1],])}
s[1:100]
w%*%P
w<-c(0.125,0.25,0.25,0.25,0.125)
w%*%P
P
? sample()
v<-c(500,1000,2000,5000,10000,20000,50000)
for(i in 1:length(v))
print(table(s[1:v[i]])/v[i])
library(VGAM)
N=10000
n= 30
a=5
b=1
X= vector("numeric",N)
theta = vector("numeric",N)
theta[1]=rgamma(1,a,b)
theta[1]=rgamma(1,a,b)
X[1]=rpois(1,theta[1])
for (i in 2:N)
{
X[i]=rpois(1,theta[i-1])
theta[i]=rgamma(1,a+X[i],X[i]+b)
}
theta0 = seq(0,1,by=0.01)
hist(theta[1000:N],breaks = 100, freq = FALSE,xlab=expression(theta))
lines(theta0,dgamma(theta0,a,b))
lines(theta0,dgamma(theta0,a,b))
theta0 = seq(0,20,by=0.01)
hist(theta[1000:N],breaks = 100, freq = FALSE,xlab=expression(theta))
lines(theta0,dgamma(theta0,a,b))
for (i in 2:N)
{
X[i]=rpois(1,theta[i-1])
theta[i]=rgamma(1,a+X[i],1+1/b)
}
theta0 = seq(0,20,by=0.01)
hist(theta[1000:N],breaks = 100, freq = FALSE,xlab=expression(theta))
lines(theta0,dgamma(theta0,a,b))
theta0 = seq(0,20,by=0.01)
hist(theta[1000:N],breaks = 100, freq = FALSE,xlab=expression(theta))
lines(theta0,dgamma(theta0,a,b))
theta0 = seq(0,20,by=0.01)
hist(theta[1000:N],breaks = 100, freq = FALSE,xlab=expression(theta))
lines(theta0,dgamma(theta0,a,b))
set.seed(1234)
N=10000
n= 30
a=5
b=1
X= vector("numeric",N)
theta = vector("numeric",N)
theta[1]=rgamma(1,a,b)
# poisson
X[1]=rpois(1,theta[1])
for (i in 2:N)
{
X[i]=rpois(1,theta[i-1])
theta[i]=rgamma(1,a+X[i],1+1/b)
}
theta0 = seq(0,20,by=0.01)
hist(theta[1000:N],breaks = 100, freq = FALSE,xlab=expression(theta))
lines(theta0,dgamma(theta0,a,b))
theta0 = seq(0,20,by=0.01)
hist(theta[1000:N],breaks = 100, freq = FALSE,xlab=expression(theta), main = "")
lines(theta0,dgamma(theta0,a,b))
setwd("~/Dropbox/STAT862/Assign4")
