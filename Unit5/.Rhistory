library(lars)
data(diabetes)
X=diabetes$x
y=diabetes$y
fit.lars = lars(X,y, type="lasso",trace=TRUE)
plot(fit.lars)
fit.lars$beta[bestindex,]
cv.fit.lars = cv.lars(X,y,mode="step")
cbind(cv.fit.lars$index,cv.fit.lars$cv)
bestindex = cv.fit.lars$index[which.min(cv.fit.lars$cv)]
which.min(cv.fit.lars$cv)
fit.lars$beta
bestindex
fit.lars$beta[bestindex,]
library(ElemStatLearn)
install.packages("ElemStatLearn")
library(ElemStatLearn)
data(ozone)
X <- ozone$temperature
y <- ozone$ozone
X <- ozone$temperature
y <- ozone$ozone
panel.smooth <- function(x,y,...)
{
fit <- lm(y ~ x + I(x^2))
x0 <- seq(min(x),max(x),len=300)
y0 = predict(fit,newdata=data.frame(x=x0),se.fit=T)
#lpolygon(c(x0,rev(x0)),c(y0$fit-2*y0$se.fit,rev(y0$fit+2*y0$se.fit)),col="gray",border=F,...)
llines(x0,predict(fit,data.frame(x=x0)),col="black")
}
xyplot(y~x, panel = myPanel)
library(lattice)
library(splines)
xyplot(y~x, panel = myPanel)
xyplot(y~X, panel = myPanel)
myPanel <- function(...)
{
panel.smooth(...)
panel.xyplot(...,alpha=.5)
}
panel.smooth <- function(x,y,...)
{
fit <- lm(y ~ x + I(x^2))
x0 <- seq(min(x),max(x),len=300)
y0 = predict(fit,newdata=data.frame(x=x0),se.fit=T)
#lpolygon(c(x0,rev(x0)),c(y0$fit-2*y0$se.fit,rev(y0$fit+2*y0$se.fit)),col="gray",border=F,...)
llines(x0,predict(fit,data.frame(x=x0)),col="black")
}
xyplot(y~X, panel = myPanel)
}
require(mgcv)
panel.smooth <- function(x,y,...)
{
fit5 <- gam(y~s(x))
xx <- seq(min(x),max(x),len=300)
yy <- predict(fit5,newdata=data.frame(x=xx),se.fit=T)
var5 <- yy$se.fit^2
plot(x0, var5, type = "l", xlab = "x", ylab = "variance")
lpolygon(c(xx,rev(xx)),c(yy$fit-1.96*yy$se.fit,rev(yy$fit+1.96*yy$se.fit)),col=rgb(.6,.6,.6,alpha=.4),border=F,...)
llines(xx,yy$fit,col="black",lwd=2)
llines(xx,yy$se.fit,col="black",lwd=2)
}
xyplot(y~X,panel=myPanel)
panel.smooth <- function(x,y,...)
{
fit <- gam(y~s(x))
xx <- seq(min(x),max(x),len=300)
yy <- predict(fit5,newdata=data.frame(x=xx),se.fit=T)
x0 = seq(min(x),max(x),len=300)
y0 = predict(fit,newdata=data.frame(x=x0),se.fit=T)
lpolygon(c(xx,rev(xx)),c(yy$fit-1.96*yy$se.fit,rev(yy$fit+1.96*yy$se.fit)),col=rgb(.6,.6,.6,alpha=.4),border=F,...)
llines(xx,yy$fit,col="black",lwd=2)
llines(xx,yy$se.fit,col="black",lwd=2)
}
xyplot(y~X,panel=myPanel)
panel.smooth <- function(x,y,...)
{
fit <- gam(y~s(x))
xx <- seq(min(x),max(x),len=100)
yy <- predict(fit5,newdata=data.frame(x=xx),se.fit=T)
x0 = seq(min(x),max(x),len=100)
y0 = predict(fit,newdata=data.frame(x=x0),se.fit=T)
lpolygon(c(xx,rev(xx)),c(yy$fit-1.96*yy$se.fit,rev(yy$fit+1.96*yy$se.fit)),col=rgb(.6,.6,.6,alpha=.4),border=F,...)
llines(xx,yy$fit,col="black",lwd=2)
llines(xx,yy$se.fit,col="black",lwd=2)
}
xyplot(y~X,panel=myPanel)
panel.smooth <- function(x,y,...)
{
fit <- gam(y~s(x))
xx <- seq(min(x),max(x),len=100)
yy <- predict(fit,newdata=data.frame(x=xx),se.fit=T)
x0 = seq(min(x),max(x),len=100)
y0 = predict(fit,newdata=data.frame(x=x0),se.fit=T)
lpolygon(c(xx,rev(xx)),c(yy$fit-1.96*yy$se.fit,rev(yy$fit+1.96*yy$se.fit)),col=rgb(.6,.6,.6,alpha=.4),border=F,...)
llines(xx,yy$fit,col="black",lwd=2)
llines(xx,yy$se.fit,col="black",lwd=2)
}
xyplot(y~X,panel=myPanel)
panel.smooth <- function(x,y,...)
{
fit <- gam(y~s(x))
xx <- seq(min(x),max(x),len=100)
yy <- predict(fit,newdata=data.frame(x=xx),se.fit=T)
x0 = seq(min(x),max(x),len=100)
y0 = predict(fit,newdata=data.frame(x=x0),se.fit=T)
lpolygon(c(xx,rev(xx)),c(yy$fit-1.96*yy$se.fit,rev(yy$fit+1.96*yy$se.fit)),col=rgb(.6,.6,.6,alpha=.4),border=F,...)
llines(xx,yy$fit,col="black",lwd=2)
}
xyplot(y~X,panel=myPanel)
panel.smooth <- function(x,y,...)
{
fit <- lm(y ~ x + I(x^2))
x0 <- seq(min(x),max(x),len=300)
y0 = predict(fit,newdata=data.frame(x=x0),se.fit=T)
lpolygon(c(x0,rev(x0)),c(y0$fit-2*y0$se.fit,rev(y0$fit+2*y0$se.fit)),col="gray",border=F,...)
llines(x0,predict(fit,data.frame(x=x0)),col="black")
}
xyplot(y~X, panel = myPanel)
setwd("~/Dropbox/Data Science")
install.packages('quantmod')
> getSymbols("GS") #Goldman OHLC from yahoo
getSymbols("GS") #Goldman OHLC from yahoo
library(quantmod)
getSymbols("GS") #Goldman OHLC from yahoo
chartSeries(GS)
setwd("~/Dropbox/STAT862/Unit5")
set.seed(999)
n <- 20
rnorm(n, 10, 3)
hist(rnorm(n,10,3))
