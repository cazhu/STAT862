library(lars)
data(diabetes)
X=diabetes$x
y=diabetes$y
fit.lars = lars(X,y, type="lasso",trace=TRUE)
plot(fit.lars)
fit.lars$beta[bestindex,]
cv.fit.lars = cv.lars(X,y,mode="step")
cbind(cv.fit.lars$index,cv.fit.lars$cv)
bestindex = cv.fit.lars$index[which.min(cv.fit.lars$cv)]
which.min(cv.fit.lars$cv)
fit.lars$beta
bestindex
fit.lars$beta[bestindex,]
library(ElemStatLearn)
install.packages("ElemStatLearn")
library(ElemStatLearn)
data(ozone)
X <- ozone$temperature
y <- ozone$ozone
X <- ozone$temperature
y <- ozone$ozone
panel.smooth <- function(x,y,...)
{
fit <- lm(y ~ x + I(x^2))
x0 <- seq(min(x),max(x),len=300)
y0 = predict(fit,newdata=data.frame(x=x0),se.fit=T)
#lpolygon(c(x0,rev(x0)),c(y0$fit-2*y0$se.fit,rev(y0$fit+2*y0$se.fit)),col="gray",border=F,...)
llines(x0,predict(fit,data.frame(x=x0)),col="black")
}
xyplot(y~x, panel = myPanel)
library(lattice)
library(splines)
xyplot(y~x, panel = myPanel)
xyplot(y~X, panel = myPanel)
myPanel <- function(...)
{
panel.smooth(...)
panel.xyplot(...,alpha=.5)
}
panel.smooth <- function(x,y,...)
{
fit <- lm(y ~ x + I(x^2))
x0 <- seq(min(x),max(x),len=300)
y0 = predict(fit,newdata=data.frame(x=x0),se.fit=T)
#lpolygon(c(x0,rev(x0)),c(y0$fit-2*y0$se.fit,rev(y0$fit+2*y0$se.fit)),col="gray",border=F,...)
llines(x0,predict(fit,data.frame(x=x0)),col="black")
}
xyplot(y~X, panel = myPanel)
}
require(mgcv)
panel.smooth <- function(x,y,...)
{
fit5 <- gam(y~s(x))
xx <- seq(min(x),max(x),len=300)
yy <- predict(fit5,newdata=data.frame(x=xx),se.fit=T)
var5 <- yy$se.fit^2
plot(x0, var5, type = "l", xlab = "x", ylab = "variance")
lpolygon(c(xx,rev(xx)),c(yy$fit-1.96*yy$se.fit,rev(yy$fit+1.96*yy$se.fit)),col=rgb(.6,.6,.6,alpha=.4),border=F,...)
llines(xx,yy$fit,col="black",lwd=2)
llines(xx,yy$se.fit,col="black",lwd=2)
}
xyplot(y~X,panel=myPanel)
panel.smooth <- function(x,y,...)
{
fit <- gam(y~s(x))
xx <- seq(min(x),max(x),len=300)
yy <- predict(fit5,newdata=data.frame(x=xx),se.fit=T)
x0 = seq(min(x),max(x),len=300)
y0 = predict(fit,newdata=data.frame(x=x0),se.fit=T)
lpolygon(c(xx,rev(xx)),c(yy$fit-1.96*yy$se.fit,rev(yy$fit+1.96*yy$se.fit)),col=rgb(.6,.6,.6,alpha=.4),border=F,...)
llines(xx,yy$fit,col="black",lwd=2)
llines(xx,yy$se.fit,col="black",lwd=2)
}
xyplot(y~X,panel=myPanel)
panel.smooth <- function(x,y,...)
{
fit <- gam(y~s(x))
xx <- seq(min(x),max(x),len=100)
yy <- predict(fit5,newdata=data.frame(x=xx),se.fit=T)
x0 = seq(min(x),max(x),len=100)
y0 = predict(fit,newdata=data.frame(x=x0),se.fit=T)
lpolygon(c(xx,rev(xx)),c(yy$fit-1.96*yy$se.fit,rev(yy$fit+1.96*yy$se.fit)),col=rgb(.6,.6,.6,alpha=.4),border=F,...)
llines(xx,yy$fit,col="black",lwd=2)
llines(xx,yy$se.fit,col="black",lwd=2)
}
xyplot(y~X,panel=myPanel)
panel.smooth <- function(x,y,...)
{
fit <- gam(y~s(x))
xx <- seq(min(x),max(x),len=100)
yy <- predict(fit,newdata=data.frame(x=xx),se.fit=T)
x0 = seq(min(x),max(x),len=100)
y0 = predict(fit,newdata=data.frame(x=x0),se.fit=T)
lpolygon(c(xx,rev(xx)),c(yy$fit-1.96*yy$se.fit,rev(yy$fit+1.96*yy$se.fit)),col=rgb(.6,.6,.6,alpha=.4),border=F,...)
llines(xx,yy$fit,col="black",lwd=2)
llines(xx,yy$se.fit,col="black",lwd=2)
}
xyplot(y~X,panel=myPanel)
panel.smooth <- function(x,y,...)
{
fit <- gam(y~s(x))
xx <- seq(min(x),max(x),len=100)
yy <- predict(fit,newdata=data.frame(x=xx),se.fit=T)
x0 = seq(min(x),max(x),len=100)
y0 = predict(fit,newdata=data.frame(x=x0),se.fit=T)
lpolygon(c(xx,rev(xx)),c(yy$fit-1.96*yy$se.fit,rev(yy$fit+1.96*yy$se.fit)),col=rgb(.6,.6,.6,alpha=.4),border=F,...)
llines(xx,yy$fit,col="black",lwd=2)
}
xyplot(y~X,panel=myPanel)
panel.smooth <- function(x,y,...)
{
fit <- lm(y ~ x + I(x^2))
x0 <- seq(min(x),max(x),len=300)
y0 = predict(fit,newdata=data.frame(x=x0),se.fit=T)
lpolygon(c(x0,rev(x0)),c(y0$fit-2*y0$se.fit,rev(y0$fit+2*y0$se.fit)),col="gray",border=F,...)
llines(x0,predict(fit,data.frame(x=x0)),col="black")
}
xyplot(y~X, panel = myPanel)
setwd("~/Dropbox/STAT862/Unit6")
betabinexch0=function (theta, data)
{
eta = theta[1]
K = theta[2]
y = data[, 1]
n = data[, 2]
N = length(y)
logf = function(y, n, K, eta) lbeta(K * eta + y, K * (1 -
eta) + n - y) - lbeta(K * eta, K * (1 - eta))
val = sum(logf(y, n, K, eta))
val = val - 2 * log(1 + K) - log(eta) - log(1 - eta)
return(val)
}
# read the data
cancermortality = read.table("cancer.txt",header = T)
# contour plot after install LearnBayes package
betabinexch0=function (theta, data)
{
eta = theta[1]
K = theta[2]
y = data[, 1]
n = data[, 2]
N = length(y)
logf = function(y, n, K, eta) lbeta(K * eta + y, K * (1 -
eta) + n - y) - lbeta(K * eta, K * (1 - eta))
val = sum(logf(y, n, K, eta))
val = val - 2 * log(1 + K) - log(eta) - log(1 - eta)
return(val)
}
# read the data
cancermortality = read.table("cancer.txt",header = T)
# contour plot after install LearnBayes package
install.packages("LearnBayes")
library(LearnBayes)
mycontour(betabinexch0,c(.0001,.003,1,20000),cancermortality, xlab=expression(eta),ylab="K")
betabinexch=function (theta, data)
{
eta = exp(theta[1])/(1 + exp(theta[1]))
K = exp(theta[2])
y = data[, 1]
n = data[, 2]
N = length(y)
logf = function(y, n, K, eta) lbeta(K * eta + y, K * (1 -
eta) + n - y) - lbeta(K * eta, K * (1 - eta))
val = sum(logf(y, n, K, eta))
val = val + theta[2] - 2 * log(1 + exp(theta[2]))
return(val)
}
mycontour(betabinexch,c(-8,-4.5,3,16.5),cancermortality, xlab="logit eta",ylab="log K")
save.image("~/Dropbox/STAT862/Unit6/data.RData")
n = 1000
x <- seq(-1, 1, n)
y <- (1-x^2)^0.5
area <- sum(y)/n
n = 1000
x <- seq(-1, 1, n)
y <- (1-x^2)^0.5
area <- 2sum(y)/n
area
? seq
x
n = 0.001
x <- seq(-1, 1, n)
x
n = 0.001
x <- seq(-1, 1, n)
y <- (1-x^2)^0.5
area <- 2sum(y)/n
area
y <- (1-x^2)^0.5
y
length(x)
m < [-1, 1]
m <- [-1, 1]
m <- (-1, 1)
n = 0.001
x <- seq(-1, 1, n)
y <- (1-x^2)^0.5
area <- 2sum(y)/length(x)
area
sum(y)
area <- 2*sum(y)/length(x)
ara
area
n = 0.000001
x <- seq(-1, 1, n)
y <- (1-x^2)^0.5
area <- 2*sum(y)/length(x)
area
n = 0.0000000000001
x <- seq(-1, 1, n)
y <- (1-x^2)^0.5
area <- 2*sum(y)/length(x)
area
n = 0.0000000000001
x <- seq(-1, 1, n)
y <- (1-x^2)^0.5
area <- 2*sum(y)/length(x)
area*2
n = 0.0000000000001
x <- seq(-1, 1, n)
y <- (1-x^2)^0.5
area <- 2*sum(y*n)/length(x)
area*2
n = 0.00000000000000000001
x <- seq(-1, 1, n)
y <- (1-x^2)^0.5
area <- 2*sum(y)/length(x)
area*2
n = 0.001
x <- seq(-1, 1, n)
y <- (1-x^2)^0.5
area <- 2*sum(y)/length(x)
area*2
n = 0.00001
x <- seq(-1, 1, n)
y <- (1-x^2)^0.5
area <- 2*sum(y)/length(x)
area*2
fbeta <- function (alpha, beta)
{
x1 = Ga(alpha, 1)
x2 = Ga(beta, 1)
return x1/(x1+x2)
}
? ga
?Ga
fbeta <- function (n, alpha, beta)
{
x1 = rgamma(n ,shape = alpha, scale = 1)
x2 = rgamma(n ,shape = beta, scale = 1)
return x1/(x1+x2)
}
? return
fbeta <- function (n, alpha, beta)
{
x1 <- rgamma(n ,shape = alpha, scale = 1)
x2 <- rgamma(n ,shape = beta, scale = 1)
x<- x1/(x1+x2)
return(x)
}
fbeta(1000, 2, 3)
fbeta <- function (n, alpha, beta)
{
x1 <- rgamma(n ,shape = alpha, scale = 1)
x2 <- rgamma(n ,shape = beta, scale = 1)
x<- x1/(x1+x2)
x0 <- rbeta(n, alpha, beta, ncp = 0)
# return(x)
par(mfrow=c(2,2))
hist(x);qqnorm(x);qqline(x);
hist(x0);qqnorm(x0);qqline(x0);
}
fbeta(1000, 2, 3)
fbeta(10000, 2, 3)
y = rtruncnorm(a= 0, b= 1, mean = 0, sd = 1)
install.packages("truncnorm")
library("truncnorm")
y = rtruncnorm(a= 0, b= 1, mean = 0, sd = 1)
y = rtruncnorm(100 ,a= 0, b= 1, mean = 0, sd = 1)
hist(y)
u = runif(1)
u
y = rtruncnorm(1,a= 0, b= 1, mean = 0, sd = 1)
y
X = seq(0,1,0.01)
c = max(dbeta(X)/dtruncnorm(X))
? dbeta
? detrucnorm
c = max(dbeta(X, 2, 3)/dtruncnorm(X))
getc <- function(alpha, beta)
{
X = seq(0,1,0.01)
c = max(dbeta(X, alpha, beta)/dtruncnorm(X))
return(c)
}
getc(2,3)
pnorm(1)
pnorm(1)-pnorm(0)
pnorm(1)-pnorm(0)
alpha = 2
beta = 3
getc <- function(alpha, beta)
{
X = seq(0,1,0.01)
c = max(dbeta(X, alpha, beta)/dtruncnorm(X))
return(c)
}
x = NULL
n = 100
r = 2
x = NULL
n = 100
r = 2
for(i in 1:(100*sqrt(2*pi/exp(1))))
{
u = runif(1)
# y = rcauchy(1)
y = rtruncnorm(1,a= 0, b= 1, mean = 0, sd = 1)
if( u <=  dtruncnorm(y, a = 0, b = 1, mean = 0, sd =1)/(dbeta(y, alpha, beta))*getc(alpha, beta))
{ x = c(x,y)}
}
hist(x)
par(mfrow=c(1,2))
hist(x)
hist(beta(100, alpha, beta))
hist(rbeta(100, alpha, beta))
x = NULL
n = 100
r = 2
for(i in 1:10000)
{
u = runif(1)
# y = rcauchy(1)
y = rtruncnorm(1,a= 0, b= 1, mean = 0, sd = 1)
if( u <=  dtruncnorm(y, a = 0, b = 1, mean = 0, sd =1)/(dbeta(y, alpha, beta))*getc(alpha, beta))
{ x = c(x,y)}
}
c = getc(alpha, beta)
u = runif(N)
y=rcauchy(N)
N= 1000
? runif
c = getc(alpha, beta)
u = runif(N)
y = rtruncnorm(N, a= 0, b= 1, mean = 0, sd = 1)
accept = ( u < dbeta(y, 2, 3)/(c*dbeta(y, alpha, beta)))
x = y[accept]
mean(accept)
1/c
par(mfrow=c(1,2))
hist(x)
hist(rbeta(100, alpha, beta))
N= 100000
u = runif(N)
y = rtruncnorm(N, a= 0, b= 1, mean = 0, sd = 1)
accept = ( u < dbeta(y, 2, 3)/(c*dbeta(y, alpha, beta)))
x = y[accept]
mean(accept)
1/c
par(mfrow=c(1,2))
hist(x)
hist(rbeta(100, alpha, beta))
ar(mfrow=c(1,2))
hist(x)
hist(rbeta(N, alpha, beta))
par(mfrow=c(1,2))
hist(x)
hist(rbeta(N, alpha, beta))
accept = (u < dbeta(y, alpha, beta)/(c*dbeta(y, alpha, beta)))
x
x = y[accept]
hist(x)
for(i in 1:n)
{
u = runif(1)
# y = rcauchy(1)
y = rtruncnorm(1,a= 0, b= 1, mean = 0, sd = 1)
if( u <=  dtruncnorm(y, a = 0, b = 1, mean = 0, sd =1)/(dbeta(y, alpha, beta))*getc(alpha, beta))
{ x = c(x,y)}
}
hist(x)
for(i in 1:n)
{
u = runif(1)
# y = rcauchy(1)
y = rtruncnorm(1,a= 0, b= 1, mean = 0, sd = 1)
if( u <=  dbeta(y, alpha, beta)/(dtruncnorm(y, a = 0, b = 1, mean = 0, sd =1)*getc(alpha, beta)))
{ x = c(x,y)}
}
hist(x)
for(i in 1:n)
{
u = runif(1)
# y = rcauchy(1)
y = rtruncnorm(1,a= 0, b= 1, mean = 0, sd = 1)
if( u <=  dbeta(y, alpha, beta)/(dtruncnorm(y, a = 0, b = 1, mean = 0, sd =1)*c))
{ x = c(x,y)}
}
hist(x)
N = 1000
u = runif(N)
y = rtruncnorm(N, a= 0, b= 1, mean = 0, sd = 1)
accept = (dbeta(y, alpha, beta)/(dtruncnorm(y, a = 0, b = 1, mean = 0, sd =1)*c))
x = y[accept]
mean(accept)
1/c
N = 10000
u = runif(N)
y = rtruncnorm(N, a= 0, b= 1, mean = 0, sd = 1)
accept = (dbeta(y, alpha, beta)/(dtruncnorm(y, a = 0, b = 1, mean = 0, sd =1)*c))
x = y[accept]
x
mean(accept)
1/c
par(mfrow=c(1,2))
hist(x)
hist(rbeta(N, alpha, beta))
x = y[accept]
hist(x)
x = y[accept]
x
mean(accept)
for(i in 1:n)
{
u = runif(1)
# y = rcauchy(1)
y = rtruncnorm(1,a= 0, b= 1, mean = 0, sd = 1)
if( u <=  dbeta(y, alpha, beta)/(dtruncnorm(y, a = 0, b = 1, mean = 0, sd =1)*c))
{ x = c(x,y)}
}
x
n = 10000
for(i in 1:n)
{
u = runif(1)
# y = rcauchy(1)
y = rtruncnorm(1,a= 0, b= 1, mean = 0, sd = 1)
if( u <=  dbeta(y, alpha, beta)/(dtruncnorm(y, a = 0, b = 1, mean = 0, sd =1)*c))
{ x = c(x,y)}
}
hist(x)
n = 100000
for(i in 1:n)
{
u = runif(1)
# y = rcauchy(1)
y = rtruncnorm(1,a= 0, b= 1, mean = 0, sd = 1)
if( u <=  dbeta(y, alpha, beta)/(dtruncnorm(y, a = 0, b = 1, mean = 0, sd =1)*c))
{ x = c(x,y)}
}
hist(x)
hist(rbeta(N, alpha, beta))
par(mfrow=c(1,2))
hist(x)
hist(rbeta(n, alpha, beta))
n = 10000
par(mfrow=c(1,2))
hist(x)
hist(rbeta(n, alpha, beta))
par(mfrow=c(2,2))
hist(x);qqnorm(x);qqline(x);
x0 = rbeta(n, alpha, beta)
hist(x0);qqnorm(x0);qqline(x0);
